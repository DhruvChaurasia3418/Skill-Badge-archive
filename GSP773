
export region=

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Set the Google Cloud project to the default project for the Cloud Shell
gcloud config set project $DEVSHELL_PROJECT_ID

# Set the Google Cloud region for Cloud Run
gcloud config set run/region $region

# Set the platform to managed for Cloud Run
gcloud config set run/platform managed

# Set the Eventarc location to the specified region
gcloud config set eventarc/location $region

# Retrieve the project number for the current project
export PROJECT_NUMBER="$(gcloud projects list \
  --filter=$(gcloud config get-value project) \
  --format='value(PROJECT_NUMBER)')"

# Add the Eventarc admin role to the Compute Engine default service account
gcloud projects add-iam-policy-binding $(gcloud config get-value project) \
  --member=serviceAccount:${PROJECT_NUMBER}-compute@developer.gserviceaccount.com \
  --role='roles/eventarc.admin'

# List available Eventarc providers
gcloud eventarc providers list

# Describe the Pub/Sub Eventarc provider
gcloud eventarc providers describe \
  pubsub.googleapis.com

# Set the Cloud Run service name
export SERVICE_NAME=event-display

# Set the Docker image to be used for Cloud Run deployment
export IMAGE_NAME="gcr.io/cloudrun/hello"

# Deploy the Cloud Run service with the specified image
gcloud run deploy ${SERVICE_NAME} \
  --image ${IMAGE_NAME} \
  --allow-unauthenticated \
  --max-instances=3

# Describe the Pub/Sub Eventarc provider again
gcloud eventarc providers describe \
  pubsub.googleapis.com

# Create an Eventarc trigger for Pub/Sub messages
gcloud eventarc triggers create trigger-pubsub \
  --destination-run-service=${SERVICE_NAME} \
  --event-filters="type=google.cloud.pubsub.topic.v1.messagePublished"

# Retrieve the Pub/Sub topic ID associated with the trigger
export TOPIC_ID=$(gcloud eventarc triggers describe trigger-pubsub \
  --format='value(transport.pubsub.topic)')

# List all Eventarc triggers
gcloud eventarc triggers list

# Publish a test message to the Pub/Sub topic
gcloud pubsub topics publish ${TOPIC_ID} --message="Hello there"

# Set the Cloud Storage bucket name
export BUCKET_NAME=$(gcloud config get-value project)-cr-bucket

# Create a new Cloud Storage bucket
gsutil mb -p $(gcloud config get-value project) \
  -l $(gcloud config get-value run/region) \
  gs://${BUCKET_NAME}/

# Get the IAM policy for the project and save it to a file
gcloud projects get-iam-policy $DEVSHELL_PROJECT_ID > policy.yaml

# Append audit log configurations to the IAM policy file
cat <<EOF >> policy.yaml
auditConfigs:
- auditLogConfigs:
  - logType: ADMIN_READ
  - logType: DATA_READ
  - logType: DATA_WRITE
  service: storage.googleapis.com
EOF

# Set the modified IAM policy for the project
gcloud projects set-iam-policy $DEVSHELL_PROJECT_ID policy.yaml

# Create a test file
echo "Hello World" > random.txt

# Copy the test file to the Cloud Storage bucket
gsutil cp random.txt gs://${BUCKET_NAME}/random.txt

# Wait for 30 seconds
sleep 30

# Describe the Cloud Audit Logs Eventarc provider
gcloud eventarc providers describe cloudaudit.googleapis.com

# Create an Eventarc trigger for Cloud Audit Logs
gcloud eventarc triggers create trigger-auditlog \
  --destination-run-service=${SERVICE_NAME} \
  --event-filters="type=google.cloud.audit.log.v1.written" \
  --event-filters="serviceName=storage.googleapis.com" \
  --event-filters="methodName=storage.objects.create" \
  --service-account=${PROJECT_NUMBER}-compute@developer.gserviceaccount.com

# List all Eventarc triggers again
gcloud eventarc triggers list

# Copy the test file to the Cloud Storage bucket again
gsutil cp random.txt gs://${BUCKET_NAME}/random.txt

# Print a completion message
echo "${BG_RED}${BOLD}Congratulations For Completing The Lab !!!${RESET}"
